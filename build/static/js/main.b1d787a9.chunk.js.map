{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","App.js","index.js"],"names":["baseUrl","getAll","axios","get","then","res","data","newObject","post","id","put","console","log","delete","Filter","value","handleFilterChange","onChange","e","PersonForm","name","number","handleNameChange","handleNumberChange","handleSubmit","onSubmit","type","Persons","phonebook","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","message","setMessage","errorMessage","setErrorMessage","useEffect","personService","people","p","indexOf","map","key","onClick","window","confirm","returnedPeople","setTimeout","catch","err","target","className","preventDefault","personObj","foundPerson","find","undefined","returnedPerson","concat","error","response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1d787a9.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = '/api/phonebook';\r\n\r\n  const getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(res => res.data);\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(res => res.data);\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(res => {\r\n        console.log(res);\r\n        return res.data\r\n    });\r\n  }\r\n\r\n  const remove = (id) => {\r\n      const request = axios.delete(`${baseUrl}/${id}`);\r\n      return request.then(res => {\r\n            console.log(res);\r\n            return getAll();\r\n        });\r\n  }\r\n  \r\n  export default { getAll, create, update, remove }","import React, { useState } from 'react';\r\n\r\nconst Filter = ({ value, handleFilterChange }) => {\r\n    return(\r\n        <form>\r\n            <div>\r\n            filter shown with: <input value={value} onChange={e => handleFilterChange(e)} />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst PersonForm = ({ name, number, handleNameChange, handleNumberChange, handleSubmit }) => {\r\n    return(\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n            <div>\r\n            name: <input value={name} onChange={e => handleNameChange(e)} />\r\n            </div>\r\n            <div>\r\n            number: <input value={number} onChange={e => handleNumberChange(e)} />\r\n            </div>\r\n            <div>\r\n            <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\nconst Persons = ({ phonebook }) => {\r\n    return(\r\n        <ul>\r\n          {phonebook}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Persons;","import React, { useState, useEffect } from 'react';\r\nimport personService from './services/persons';\r\nimport Filter from './components/Filter';\r\nimport PersonForm from './components/PersonForm';\r\nimport Persons from './components/Persons';\r\nimport './styles/App.css';\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]); \r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ filter, setFilter ] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const handleNameChange = e => setNewName(e.target.value);\r\n  const handleNumberChange = e => setNewNumber(e.target.value);\r\n  const handleFilterChange = e => setFilter(e.target.value);\r\n\r\n  useEffect(() => {\r\n    personService.getAll()\r\n                  .then(people => {\r\n                    setPersons(people)\r\n                  })\r\n  }, [])\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const personObj = { name: newName, number: newNumber};\r\n    const foundPerson = persons.find(p => p.name === newName);\r\n    if(foundPerson === undefined){\r\n      personService.create(personObj)\r\n                    .then(returnedPerson => {\r\n                      setPersons(persons.concat(returnedPerson));\r\n                      setMessage(`${newName} added to the phonebook!`);\r\n                      setNewName('');\r\n                      setNewNumber('');\r\n\r\n                      setTimeout(() => {\r\n                        setMessage(null)\r\n                      }, 5000)\r\n\r\n                    })\r\n                    .catch(error => {\r\n                      // p채채set k채siksi palvelimen palauttamaan virheilmoitusolioon n채in\r\n                      console.log(error.response.data)\r\n                      setErrorMessage(`${error.response.data.error}`);\r\n                      setTimeout(() => {\r\n                        setErrorMessage(null)\r\n                      }, 5000)\r\n                    })\r\n    }\r\n    else{\r\n      if(window.confirm(`${newName} already exists. Do you want to update his/her information?`)){\r\n        personService.update(foundPerson.id, personObj)\r\n                      .then(returnedPerson => {\r\n                        console.log(returnedPerson);\r\n                        setPersons(persons.map(p => {\r\n                          return (p.name === newName ? personObj : p)\r\n                        }));\r\n                        setMessage(`${newName} info was updated!`);\r\n                        setNewName('');\r\n                        setNewNumber('');\r\n\r\n                        setTimeout(() => {\r\n                          setMessage(null)\r\n                        }, 5000)\r\n\r\n                      })\r\n                      .catch(err => {\r\n                        setErrorMessage(`This person was already removed from the server...`)\r\n                        \r\n                        setTimeout(() => {\r\n                          setErrorMessage(null)\r\n                        }, 5000)\r\n  \r\n                        setPersons(persons.filter(p => p.id !== foundPerson.id))\r\n                      });\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleDelete = id => {\r\n    if(window.confirm(\"Do you really want to delete?\")){\r\n      personService.remove(id)\r\n                    .then(returnedPeople => {\r\n                      console.log(returnedPeople);\r\n                      setPersons(returnedPeople);\r\n                      setMessage(`Person deleted!`);\r\n\r\n                      setTimeout(() => {\r\n                        setMessage(null)\r\n                      }, 5000)\r\n\r\n                    })\r\n                    .catch(err => {\r\n                      setErrorMessage(`This person was already removed from the server...`)\r\n                      \r\n                      setTimeout(() => {\r\n                        setErrorMessage(null)\r\n                      }, 5000)\r\n\r\n                      setPersons(persons.filter(p => p.id !== id))\r\n                    });\r\n    }\r\n  }\r\n\r\n  let phonebookFiltered = persons.filter(p => p.name.indexOf(filter) > -1);\r\n  let phonebook = phonebookFiltered.map(p => <li key={p.name}>{p.name} {p.number}<button onClick={() => handleDelete(p.id)}>delete</button></li>);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n        <Filter value={filter} handleFilterChange={handleFilterChange}/>\r\n\r\n        {message === null ? <div></div> : <div className=\"success\">{message}</div>}\r\n        {errorMessage === null ? <div></div> : <div className=\"error\">{errorMessage}</div>}\r\n\r\n      <h2>Add a new</h2>\r\n        <PersonForm name={newName} number={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} handleSubmit={handleSubmit} />\r\n      <h2>Numbers</h2>\r\n        <Persons phonebook={phonebook}/>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}